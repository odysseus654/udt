<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Introduction</title>
<link rel="stylesheet" href="udtdoc.css" type="text/css" />
</head>

<body>
<div class="ref_head">&nbsp;UDT Tutorial</div>

<h1><font color="#000080">Configure UDT Options</font></h1>

<p>Options of UDT are read and set through getsockopt and setsockopt methods. Before modifying any option, bear in mind that it is NOT required that you modify the default options. If the 
application has sound performance with the default options, just leave them alone.</p>

<p>UDT_MSS is used to configure the packet size. On most of time, the optimal UDT packet size is the network MTU size. The default value is 1500 bytes. A UDT connection will choose the 
smaller value of the MSS between the two peer sides. For example, if you want to set 9000-byte MSS, you have to set this option at both sides, and one of the value has to be exactly equal to 
9000, and the other must not be less than 9000.</p>

<p>UDT uses a different semantics of synchronization mode from traditional sockets. It can set the sending and receiving synchronization independently, which allows more flexibility. 
However, UDT does not allow non-blocking operation on connection setup and close. The sychronization mode of sending and receiving can be set on UDT_SNDSYN and UDT_RCVSYN, respectively.</p>

<p>The UDT buffer size is used to limit the size of temporary storage of sending/receiving data. The buffer size is only a limit and memory is allocated upon necessary. Generally, larger 
buffer (but not so large that the physical memory is used up) is better. For good performance the the buffer sizes for both sides should be at least Bandwidth*RTT.</p>

<p>UDT uses UDP as the data channel, so the UDP buffer size affects the performance. Again, a larger value is generally better, but the effects become smaller and disappear as the buffer 
size increases. Generally, the sending buffer size can be a small value, because it does not limit the packet sending much but a large value may increase the end-to-end delay.</p>

<p>UDT_FC is actually an internal parameter and you should set it to not less than UDT_RCVBUF/UDT_MSS. The default value is relatively large, therefore unless you set a very large 
receiver buffer, you do not need to change this option.</p>

<p>UDT_LINGER is similar to the SO_LINGER option on the regular sockets. It allows the UDT socket continue to sent out data in the sending buffer when close is called.</p>

<p>UDT_RENDEZVOUS is used to enable rendezvous connection setup. When rendezvous mode is enabled, a UDT socket cannot call listen or accept; instead, in order to set up a rendezvous 
connection, both the peer sides must call connect at approximately the same time. This is usefule in traversing a firewall.</p>

<p>UDT_SNDTIMEO and UDT_RCVTIMEO are similar to SO_SNDTIMEO and SO_RCVTIMEO, respectively. They are used to set a timeout value for packet sending and receiving.</p>

<p>Example: read current UDT settings</p>
<div class="code">
<p>
UDTSOCKET u;<br>
<br>
...<br>
<br>
bool block;<br>
int size = sizeof(bool);
<br>
UDT::getsockopt(u, UDT_SNDSYN, 0, &block, &size);<br>
</p>
</div>

<p>Example: modify UDT settings</p>
<div class="code">
<p>
UDTSOCKET u;<br>
<br>
...<br>
<br>
bool block = false;<br>
<br>
UDT::setsockopt(u, UDT_SNDSYN, 0, &block, sizeof(bool));<br>
</p>
</div>


<p>&nbsp;</p>
</body>
</html>
