/********************************************************************
Copyright (c) 2001,2002, The Board of Trustees of the University of Illinois.
All Rights Reserved.

SABUL High Performance Data Transfer Protocol

Laboratory for Adavanced Computing (LAC)
National Center for Data Mining (NCDM)
University of Illinois at Chicago
http://www.lac.uic.edu/

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software (SABUL) and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to permit
persons to whom the Software is furnished to do so, subject to the
following conditions:

Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimers.

Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimers in the documentation
and/or other materials provided with the distribution.

Neither the names of the University of Illinois, LAC/NCDM, nor the names
of its contributors may be used to endorse or promote products derived
from this Software without specific prior written permission.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE CONTIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
********************************************************************/


/********************************************************************
packet.h
Data and control packet structure

Author: Yunhong Gu [gu@lac.uic.edu]
Last Update: Oct. 08, 2002
********************************************************************/


#ifndef _SABUL_PACKET_H_
#define _SABUL_PACKET_H_

#include <sys/uio.h>

template <class T> class CPacket
{
public:
   CPacket(const int& len);
   virtual ~CPacket();

   virtual int getLength() const;
   virtual void setLength(const int& len);
   virtual T* getData() const;

protected:
   T* m_pData;
   int m_iLength; 
};

//
// This is the data packet structure.
// m_lSeqNo and m_pcData are alias names of the 
// packet sequence number and application data.
//
// It is NOT used in the current version of SABUL 2.x
// See CPacketVector class.
//

class CPktSblData: public CPacket<char>
{
public:
   CPktSblData(const int& len);

   long& m_lSeqNo;
   char* m_pcData;
};

//
// The packet structure of control information.
// 
// Packet Type: 1 (ACK)
// The positive acknowledgement telling the sender that all packets prior to 
// the sequence number carried in ATTR filed have been successfully received.
//
// Packet Type: 2 (ERR)
// The negative acknowledgement. In ATTR filed is the total number of loss
// packet seq. no. carried in this packet (maximum 367). The real loss list is
// in the DATA field.
//
// Packet Type: 3 (EXP)
// This is a pseudo packet generated by the sender itself, upon an expiration timer is expired.
//
// Packet Type: 4 (SYN)
// Tells the sender to perform rate control. In the ATTR field is total number of
// received packets since last SYN time.
//

class CPktSblCtrl: public CPacket<long>
{
public:
   CPktSblCtrl(const int& len);

   long& m_lPktType;
   long& m_lAttr;
   long* m_plData;
};


//
// The data packet is sent/received using an iovec structure
// to take advantages of the data gathering/scatering.
// Reference: manual of writev and readv system call
//

class CPacketVector
{
public:
   CPacketVector(const int& len);
   ~CPacketVector();

   int getLength() const;
   void setLength(const int& len);

   void pack(const long& seqno, const char* pcdata, const int& size);
   iovec* getPacketVector() const;

   long& m_lSeqNo;
   char*& m_pcData;

private:
   long m_lSeqNoVec;
   mutable iovec m_PacketVector[2];
};

#endif
